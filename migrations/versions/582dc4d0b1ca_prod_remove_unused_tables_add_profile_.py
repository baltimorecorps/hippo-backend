"""PROD remove unused tables, add profile and related tables, add program_app table

Revision ID: 582dc4d0b1ca
Revises: b4243d2f08a0
Create Date: 2020-08-04 13:11:03.024582

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '582dc4d0b1ca'
down_revision = 'b4243d2f08a0'
branch_labels = None
depends_on = None

address_type = postgresql.ENUM('home', 'work', name='AddressType')
status = postgresql.ENUM('active', 'inactive', name='Status')


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # adds profile related tables and fields
    op.create_table('profile',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('contact_id', sa.Integer(), nullable=False),
    sa.Column('gender', sa.String(), nullable=True),
    sa.Column('gender_other', sa.String(), nullable=True),
    sa.Column('pronoun', sa.String(), nullable=True),
    sa.Column('pronoun_other', sa.String(), nullable=True),
    sa.Column('years_exp', sa.String(), nullable=True),
    sa.Column('job_search_status', sa.String(), nullable=True),
    sa.Column('current_job_status', sa.String(), nullable=True),
    sa.Column('current_edu_status', sa.String(), nullable=True),
    sa.Column('previous_bcorps_program', sa.String(), nullable=True),
    sa.Column('needs_help_programs', sa.Boolean(), nullable=True),
    sa.Column('hear_about_us', sa.String(), nullable=True),
    sa.Column('hear_about_us_other', sa.String(), nullable=True),
    sa.Column('value_question1', sa.String(), nullable=True),
    sa.Column('value_question2', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    op.create_table('program_app',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('contact_id', sa.Integer(), nullable=False),
    sa.Column('program_id', sa.Integer(), nullable=False),
    sa.Column('is_approved', sa.Boolean(), nullable=True),
    sa.Column('is_interested', sa.Boolean(), nullable=True),
    sa.Column('decision_date', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], ),
    sa.ForeignKeyConstraint(['program_id'], ['program.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    op.create_table('contact_address',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('contact_id', sa.Integer(), nullable=False),
    sa.Column('profile_id', sa.Integer(), nullable=False),
    sa.Column('is_primary', sa.Boolean(), nullable=True),
    sa.Column('street1', sa.String(), nullable=True),
    sa.Column('street2', sa.String(), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('state', sa.String(), nullable=True),
    sa.Column('country', sa.String(), nullable=True),
    sa.Column('zip_code', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], ),
    sa.ForeignKeyConstraint(['profile_id'], ['profile.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    op.create_table('programs_completed',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('profile_id', sa.Integer(), nullable=False),
    sa.Column('fellowship', sa.Boolean(), nullable=True),
    sa.Column('mayoral_fellowship', sa.Boolean(), nullable=True),
    sa.Column('public_allies', sa.Boolean(), nullable=True),
    sa.Column('kiva', sa.Boolean(), nullable=True),
    sa.Column('civic_innovators', sa.Boolean(), nullable=True),
    sa.Column('elevation_awards', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['profile_id'], ['profile.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    op.create_table('race',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('contact_id', sa.Integer(), nullable=False),
    sa.Column('profile_id', sa.Integer(), nullable=False),
    sa.Column('american_indian', sa.Boolean(), nullable=True),
    sa.Column('asian', sa.Boolean(), nullable=True),
    sa.Column('black', sa.Boolean(), nullable=True),
    sa.Column('hawaiian', sa.Boolean(), nullable=True),
    sa.Column('hispanic', sa.Boolean(), nullable=True),
    sa.Column('south_asian', sa.Boolean(), nullable=True),
    sa.Column('white', sa.Boolean(), nullable=True),
    sa.Column('not_listed', sa.Boolean(), nullable=True),
    sa.Column('race_other', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], ),
    sa.ForeignKeyConstraint(['profile_id'], ['profile.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    op.create_table('role_choice',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('profile_id', sa.Integer(), nullable=False),
    sa.Column('advocacy_public_policy', sa.Boolean(), nullable=True),
    sa.Column('community_engagement_outreach', sa.Boolean(), nullable=True),
    sa.Column('data_analysis', sa.Boolean(), nullable=True),
    sa.Column('fundraising_development', sa.Boolean(), nullable=True),
    sa.Column('marketing_public_relations', sa.Boolean(), nullable=True),
    sa.Column('program_management', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['profile_id'], ['profile.id'], ),
    sa.PrimaryKeyConstraint('id')
    )


    # drops unused tables
    op.drop_table('address')
    status.drop(op.get_bind(), checkfirst=False)
    address_type.drop(op.get_bind(), checkfirst=False)
    op.drop_table('review')
    op.drop_table('response')
    op.drop_table('question')


    # cleans up contact table
    op.add_column('contact', sa.Column('email', sa.String(), nullable=True))
    op.add_column('contact', sa.Column('stage', sa.Integer(), nullable=True))
    op.drop_column('contact', 'race_all')
    op.drop_column('contact', 'salutation')
    op.drop_column('contact', 'pronouns_other')
    op.drop_column('contact', 'gender')
    op.drop_column('contact', 'gender_other')
    op.drop_column('contact', 'birthdate')
    op.drop_column('contact', 'race_other')
    op.drop_column('contact', 'pronouns')


    # adds program_id then sets the value before making it required
    op.drop_constraint('opportunity_cycle_id_fkey', 'opportunity', type_='foreignkey')
    op.drop_table('cycle')

    op.add_column('opportunity', sa.Column('program_id', sa.Integer()))
    op.execute("""INSERT INTO program (name) VALUES ('Mayoral Fellowship')""")
    op.execute("""INSERT INTO program (name) VALUES ('Fellowship')""")
    op.execute("""UPDATE opportunity SET program_id = 1""")
    op.execute("""UPDATE opportunity SET program_id = 2
               WHERE program_name = 'Mayoral Fellowship'""")
    op.execute("""UPDATE opportunity SET program_id = 3
               WHERE program_name = 'Fellowship'""")

    op.alter_column('opportunity', 'program_id', existing_type=sa.Integer(), nullable=False)
    op.create_foreign_key('opportunity_program_id_fkey', 'opportunity', 'program', ['program_id'], ['id'])

    op.drop_column('opportunity', 'cycle_id')


    # adds trello_board_id to program table and sets this value
    # to Q3 talent intake board
    op.add_column('program', sa.Column('trello_board_id', sa.String(), nullable=True))
    op.execute("UPDATE program SET trello_board_id='5ddd741f5cc43e2b21346dbb'")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('program', 'trello_board_id')
    op.add_column('opportunity', sa.Column('cycle_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint('opportunity_program_id_fkey', 'opportunity', type_='foreignkey')
    op.drop_column('opportunity', 'program_id')
    op.create_foreign_key('opportunity_cycle_id_fkey', 'opportunity', 'cycle', ['cycle_id'], ['id'])
    op.add_column('contact', sa.Column('pronouns', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('contact', sa.Column('race_other', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('contact', sa.Column('birthdate', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('contact', sa.Column('gender_other', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('contact', sa.Column('gender', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('contact', sa.Column('pronouns_other', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('contact', sa.Column('salutation', postgresql.ENUM('miss', 'mrs', 'mr', 'ms', 'dr', name='Salutation'), autoincrement=False, nullable=True))
    op.add_column('contact', sa.Column('race_all', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.drop_column('contact', 'stage')
    op.drop_column('contact', 'email')
    op.create_table('response',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('program_contact_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('question_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('response_text', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['program_contact_id'], ['program_contact.id'], name='response_program_contact_id_fkey'),
    sa.ForeignKeyConstraint(['question_id'], ['question.id'], name='response_question_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='response_pkey')
    )
    op.create_table('review',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('stage', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('card_id', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    sa.Column('program_contact_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['program_contact_id'], ['program_contact.id'], name='review_program_contact_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='review_pkey')
    )
    op.create_table('cycle',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('program_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date_start', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('date_end', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('intake_talent_board_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('intake_org_board_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('match_talent_board_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('match_opp_board_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('review_talent_board_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['program_id'], ['program.id'], name='cycle_program_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='cycle_pkey')
    )
    op.create_table('question',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('program_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('question_text', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('limit_word', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('limit_character', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['program_id'], ['program.id'], name='question_program_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='question_pkey')
    )
    op.create_table('address',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('contact_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_primary', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('street1', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('street2', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('state', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('country', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('postal_code', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('home', 'work', name='AddressType'), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('active', 'inactive', name='Status'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], name='address_contact_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='address_pkey')
    )
    op.drop_table('role_choice')
    op.drop_table('race')
    op.drop_table('programs_completed')
    op.drop_table('contact_address')
    op.drop_table('program_app')
    op.drop_table('profile')
    # ### end Alembic commands ###

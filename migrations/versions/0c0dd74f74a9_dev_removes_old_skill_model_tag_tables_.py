"""DEV Removes old_skill_model, tag tables, resume tables

Revision ID: 0c0dd74f74a9
Revises: c943c888df2c
Create Date: 2020-10-22 13:12:01.017114

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0c0dd74f74a9'
down_revision = 'c943c888df2c'
branch_labels = None
depends_on = None

tag_type = sa.Enum('function', 'skill', 'topic', name='TagType')
tag_status = sa.Enum('active', 'inactive', name='TagStatusType')

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('resume_item')
    op.drop_table('resume_section')
    op.drop_table('resume')
    op.drop_index('ix_experience_skills_skill_id', table_name='experience_skills')
    op.drop_table('experience_skills')
    op.drop_table('skill_item')
    op.drop_table('tag_item')
    op.drop_table('tag')

    tag_type.drop(op.get_bind(), checkfirst=False)
    tag_status.drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('resume',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('contact_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('date_created', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('gdoc_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], name='resume_contact_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='resume_pkey')
    )

    op.create_table('tag',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('tag_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('function', 'skill', 'topic', name='TagType'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('active', 'inactive', name='TagStatusType'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='tag_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('tag_item',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('tag_item_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('contact_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], name='tag_item_contact_id_fkey'),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], name='tag_item_tag_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='tag_item_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('program_contact',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('contact_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('program_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('card_id', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    sa.Column('stage', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_approved', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], name='program_contact_contact_id_fkey'),
    sa.ForeignKeyConstraint(['program_id'], ['program.id'], name='program_contact_program_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='program_contact_pkey')
    )
    op.create_table('skill_item',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('contact_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], name='skill_item_contact_id_fkey'),
    sa.PrimaryKeyConstraint('id', 'contact_id', name='skill_item_pk'),
    postgresql_ignore_search_path=False
    )
    op.create_table('resume_section',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('resume_section_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('resume_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('min_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['resume_id'], ['resume.id'], name='resume_section_resume_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='resume_section_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('resume_item',
    sa.Column('resume_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('section_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('exp_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('achievement_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('resume_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('indented', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['achievement_id'], ['achievement.id'], name='resume_item_achievement_id_fkey'),
    sa.ForeignKeyConstraint(['exp_id'], ['experience.id'], name='resume_item_exp_id_fkey'),
    sa.ForeignKeyConstraint(['resume_id'], ['resume.id'], name='resume_item_resume_id_fkey'),
    sa.ForeignKeyConstraint(['section_id'], ['resume_section.id'], name='resume_item_section_id_fkey'),
    sa.ForeignKeyConstraint(['tag_id'], ['tag_item.id'], name='resume_item_tag_id_fkey'),
    sa.PrimaryKeyConstraint('resume_order', 'section_id', name='resume_item_pkey')
    )
    op.create_table('experience_skills',
    sa.Column('experience_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('skill_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('contact_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['experience_id'], ['experience.id'], name='experience_skills_experience_id_fkey'),
    sa.ForeignKeyConstraint(['skill_id', 'contact_id'], ['skill_item.id', 'skill_item.contact_id'], name='experience_skills_skill_id_fkey'),
    sa.PrimaryKeyConstraint('experience_id', 'skill_id', 'contact_id', name='experience_skills_pk')
    )
    op.create_index('ix_experience_skills_skill_id', 'experience_skills', ['skill_id'], unique=False)
    # ### end Alembic commands ###
